[
  {
    "id": 0,
    "title": "自警自省自规划",
    "category": "自我激励",
    "tags": [
      "规划",
      "生活",
      "励志"
    ],
    "url": "/blog/2013/10/22/zi-jing-zi-sheng-zi-gui-hua/",
    "content": "经历了几天的研究终于把博客搭起来了，本博客使用了Octopress，十分简单容易上手\n，就连我这个对于Ruby和前端技术一概不通的人也能很快就建成属于自己的博客。但我\n一直是一个比较有强迫症的人，不希望自己的博客用着千篇一律的模板，总想试遍所有\n的插件，让它变成自己理想的样子。所以经过了多天的调试布局，才开始写这第一篇文\n章。这也可能是我自身拖延症的一种表现吧（我这毛病还不少），不知道怎么下笔开始\n写博客，不过万事开头难，我相信只要我坚持下去，一定会有收获的。今天的第一篇文\n章就不写博客是怎么搭建的了，想回顾一下自己的过去，展望一下将来（老调调了）。\n主要是反省一下自己，给自己一个警示作用，并订立一个明确的规划，希望自己能够持\n之以恒。\n<!-- more -->\n***\n现在已经是十月份了，我的校招季也算过去了，不知道算是幸运或是不幸，8月底获得\n了某互联网大公司的一个offer，职位并不算令自己满意，但公司是我十分向往的，当\n时接受了offer，心里想着“又不着急签三方，还可以再找找其他的”。但获得了offer\n之后整个人就松了好多，十月份各大小公司来招聘的，自然就没那么卖力了。虽然参加\n不多，但还是备受打击，感觉的自己的不足，也下定决心补足自己。\n\n现在我在一所985名校读研究生，学的计算机专业。本科是来自一所默默无名的一本院\n校，高考时的失利，也许是我考研究生的最大的动力。从小学习一直不错，但高考却发\n挥失利，进入了一所自己不满意的学校。当时想的是“反正到时候考个好的研究生就好\n了”，现在想想多少有些后悔，进入了名校之后，更让我深刻体会到这一点，周围的环\n境确实决定了很多。这并不是在抱怨本科的学校，学校会尽自己最大的力给你最好的教\n育，我们应该感激。在本科时候似乎学每门课都没用很费力过，甚至很多课程都是靠考\n试前突击几天，照样高分通过，曾经还自诩学习能力强。回想起来才知道错过了什么，\n也导致了现在基础松动。当时考研，自己比较努力，也比较幸运获得了好的成绩，进入\n了理想的学校，这也是我有机会重新认识所学的专业，更明确自己将来想做些什么。\n\n终于进入了研究生阶段，进入学校才发现周围很多的强人，和他们交谈的时候很多东西\n我都没听说过，他们却都能侃侃而谈，相谈甚欢。开始我都是默默地记在心里，之后再\n上网去搜索了解。慢慢的就发现了原来自己对所学专业的了解，甚至连入门都不算，大\n学真是浪费了太多时间了。从那时开始我才开始一点一点弥补不足，希望能赶上他人的\n脚步。开始的时候上课，学到很多的知识，从网上和周围同学那也接触到一些时下比较\n火的技术，如数据挖掘、信息检索、机器学习等等。也曾探索过一些方向，但发现没有\n实际的项目加以运用，只停留在讲课内容，理论层面，而且也不是我将来想从事的方向\n。之后也对自己的研究方向进行过思考，发现自己兴趣在于linux系统层开发，一个原\n因是linux的魅力，还有就是周围同学的影响，最后就是项目相关，用于实践。\n\n一年的时间很快就过去了，追赶的脚步还在继续，但他人前进的脚步一点也不慢于我，\n所以差距一直存在，这似乎也在消磨我的自信心，自卑感逐渐加强。研二上学期就面临\n校招，我总想，若是再给我一年的时间就好了，现在我所准备的并不足以信心十足的面\n对校招，取得理想offer。但不回一切都顺你心意的，该来的总是要来。开学要毕业论\n文开题答辩，准备的焦头烂额。刚答辩完就去参加了我的第一次笔试，也是人生中应聘\n的第二次笔试。笔试还顺利，晚上就收到面试通知。自己还是很紧张，比较没有过面试\n经历，而且对自己的技术也并不有信心。果然第二天的面试及其惨烈，算法答得一塌糊\n涂，linux问的及其深入，都是内核方面的问题，交叉面了两轮，然后就没有然后了，\n我也知道这是婉拒了。毕竟自己的表现自己清楚。也是这次面试给了我极大的打击，甚\n至有一些阴影，感觉自己什么都不会，什么都不行，不敢去面试，有时候甚至消极地想\n最后笔试都不要过。接下来我也没有广投简历，只是投了几家比自己手中offer好的公\n司，有些面试感受很好，也相对顺利，但最后也是一无所获。就这样也就在前不久把三\n方寄给了某度，工作就这么定了。找工作的过程并不算很曲折，因为早早的提前offer\n使自己心里有底，但面其他公司也充分让我感受的自身的不足，也让我清楚的认识到，\n我还是想要走技术这条路，进入国企银行混个北京户口并不是我那么想要的。总之是与\n我有益的。\n\n既然工作定了就该想一想自己以后的路了，距离入职还有小一年的时间。该好好计划一下这段时间了，估计今后也不会有这么自由的时间了。我打算主要从三条线进行查漏补缺：\n\n1. 重新学习C语言（不要以为它很简单），数据结构与算法。\n> 参考书籍：[C程序设计语言](http://www.amazon.cn/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-%E5%85%8B%E5%B0%BC%E6%B1%89/dp/B0011425T8/ref=sr_1_1?ie=UTF8&qid=1382437254&sr=8-1&keywords=C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80)、\n[数据结构与算法分析](http://www.amazon.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-C%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0-%E7%BB%B4%E6%96%AF/dp/B002WC7NGS/ref=sr_1_1?ie=UTF8&qid=1382437316&sr=8-1&keywords=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90)、\n[算法导论](http://www.amazon.cn/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-Thomas-H-Cormen/dp/B00AK7BYJY/ref=sr_1_1?ie=UTF8&qid=1382437342&sr=8-1&keywords=%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA)\n2. 操作系统、linux内核与系统编程\n> 参考书籍：[UNIX环境高级编程](http://www.amazon.cn/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E5%8F%B2%E8%92%82%E6%96%87%E6%96%AF/dp/B00114GRG0/ref=sr_1_1?ie=UTF8&qid=1382437399&sr=8-1&keywords=UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B)、\n[深入理解linux内核](http://www.amazon.cn/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3LINUX%E5%86%85%E6%A0%B8-%E5%8D%9A%E9%9F%A6/dp/B0011F5RYM/ref=sr_1_1?ie=UTF8&qid=1382437438&sr=8-1&keywords=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8)、\n[深入理解计算机系统](http://www.amazon.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%9B%E4%B9%A6-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E5%B8%83%E8%8E%B1%E6%81%A9%E7%89%B9/dp/B004BJ18KM/ref=sr_1_1?ie=UTF8&qid=1382437465&sr=8-1&keywords=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F)\n3. 其他感兴趣技术，如[个人博客](http://812lcl.github.io/)、`Github`、`shell`、`latex`、`vim`。搭了这个博客后，也\n有一点想稍微学一下web前端技术与Ruby的想法。\n\n这是一个很粗略的规划，要学的东西很多，按照陈皓的[程序员连接攻略](http://coolshell.cn/articles/4990.html)，自己在启蒙入门还有很多需要学习。看书必须与动手\n实践相结合，很多书之前也都看过，可一段时间用，又忘了，现在是一个知识快餐化的\n时代，来的快走的快，反复实践才能留住知识。写这篇文章也只是想驱动自己马上开始\n，拖延症是病，得治啊，文章写的我都惨不认识，但坚持下去肯定会越写越好，这篇文\n章是为了警示自己，我还有很多东西要学，现在不学迟早是要补的。当然做好一件事我\n个人觉得需要两点：耻辱感和成就感。知耻而后勇，耻辱感会刺激你更努力，做得更好\n。但一直努力仍然没有回报，你也不会坚持下去，所以还需要成就感，即使小小的成就\n。成就感会使你更开心的努力，而且小小的成就慢慢积累也许就会达到你不敢想象的程\n度。\n\n加油吧，少年，我改努力了！\n",
    "date": {
      "year": "2013",
      "month": "October",
      "day": "22"
    }
  },
  {
    "id": 1,
    "title": "多系统Linux安装及配置",
    "category": "磨刀利刃",
    "tags": [
      "ubuntu",
      "linux",
      "装系统",
      "编程环境"
    ],
    "url": "/blog/2013/10/23/duo-xi-tong-linuxan-zhuang-ji-pei-zhi/",
    "content": "##1. 多系统安装\n开始编程当然首先的任务是要配置好自己喜欢的编程环境，自从接触了linux，越来越\n喜欢linux，先后使用过fedora、centos、ubuntu三个不同的版本。fedora还是比较炫\n的，开始用了一段时间，但是由于一些原因之后开始使用内核版本更低的centos，并且\n使用了较长一段时间。fedora和centos操作都是很像的，都是和redhat很接近的发行版\n本，fedora内核版本更高，图形界面也更为华丽，但不如centos稳定。centos给我的\n感觉就是朴实、稳定，但配置到我满意的状态也是需要一番功夫的，很多软件并不支持\ncentos，因为它的一些库版本较低，有些需要强制更新为更高版本才能用。而且学校的\n校园网对国外的一些网站连不通，配置centos的源也比较麻烦，还需要添加很多不同的\n第三方软件库，如EPEL源、RPMForge源、RPMFusion源、Rmei源。而且centos要挂载\n<!-- more -->\nntfs的windows分区还需要安装ntfs-3g等，所以centos相对于其他版本，还是麻烦一些\n，至少对我来说是的。现在我一般多用ubuntu了，这个系统很好安装很好上手。centos\n的bin镜像要4G大小，刻进u盘里占用u盘过大空间，又不能用一次刻一次，所以常常\n采用的方法是，从电脑上分出一个fat32的区，方centos镜像，然后用easyBCD简历grub\n引导，开机引导到centos镜像进行安装。而ubuntu的镜像只有七八百兆，刻进u盘，都\n都可以忽略它的存在，只要开机u盘启动即可进入安装了。这里也不讲具体如何安装了\n，可以参考一下\n[U盘安装Linux图解](http://blog.csdn.net/xiazdong/article/details/7523331)。\n中间linux安装过程也不多讲了，安装提示一步一步来就好了。\n\n注意装linux之前最好是先把要装linux的分区分出来。我最多在一台电脑上装了四个系\n统：Win7、Win8、CentOS、Ubuntu。装多系统最好先windows后linux，先centos后\nubuntu。而且装多系统最好有一个u盘pe，防止装的过程出错，引导项没了，windows\n也启动不起来。\n##2. 更新软件源\nubuntu更新软件源很方便，已经收录了国内大部分知名的源，也不需上网查找，更改\n/etc/apt/sources.list文件。\n\n只需要打开软件中心->编辑->软件源，然后点击源的列表->其他站点\n\n然后点选择最佳服务器，系统会根据你的网络状况，选择一个最快的源站点，最后选择\n即可，非常方便。\n##3. 安装喜欢的编辑器――VIM\n我个人一般是习惯与使用有编辑器之神称号的vim，也是现在linu里都默认安装的编辑\n器，十分的高效。当然其他还有emacs，smu等等，没怎么使用过，但也都是神级\n编辑器。\n\nvim有很多的插件，通过添加插件可以将原本就强大的vim，改装成近似IDE的样子。\n我也会专门写一篇文章，记录我安装配置这些插件的过程。这些插件已经上传到我的\n[GitHub](https://github.com/812lcl)中，就可以很快的还原我习惯的vim设置。当然\n这之前需要先安装一些必备软件。包括gcc、g++编译器，java开发环境、vim插件ctags\n和cscope。\n```\nsudo apt-get install gcc g++ git\nsudo apt-get install build-essential\nsudo apt-get install default-jre default-jdk\nsudo apt-get install ctags cscope\n```\n必要的都安装完了，下面就是配置vim了，vim系统已经默认安装，ubuntu下也可以安装\n图形界面版Gvim，在软件中心里就可以搜到，安装即可。然后执行如下命令\n```\ncd ~\ngit clone https://github.com/812lcl/vim.git\nmv vim .vim\nmv .vim/vimrc-lcl .vimrc\n```\n配置C/C++和java的只能补全\n```\njavac ~/.vim/autoload/Reflection.java\nmv ~/.vim/autoload/Reflection.class ~\ncd /usr/include/c++\nctags -R  然后在.vimrc中添加set tags+=/usr/include/c++/tags\n```\n以上就配置好了vim的一系列插件，可以查看配置文件`.vimrc`，或我的另一篇文章\n[VIM插件配置，比肩IDE](http://812lcl.github.io/blog/2013/10/24/vimcha-jian-pei-zhi-%2Cbi-jian-ide/).\n##4. 一些常用软件\n当然linux也是离不开娱乐的，看电影、听歌还是要的。\n\n- 听歌：自带的rhythm box播放器就可以了，但是缺少一些解码插件，打开一首歌，会自动寻找，统一安装即可。\n\n- 看电影：我一般是安装smplayer，在软件中心里可以搜到，点点鼠标就OK了。\n\n- 浏览器：linux都自带了firefox，但我还是习惯用chrome，软件中心里没有，去官网下一个deb包就可以了，`dpkg -i`安装。\n\n- 虚拟机：有时候还是需要以下windows的，用个网银、MS office等等，装个虚拟机也是必要的，virtual box就搞定了，同样软件中心点一点。\n\n- 其他：codeblocks、eclipse等，软件中心或是apt-get install即可。\n\n##5. 更新\n没有什么要设置的了，可以更新一下软件了。\n\n\tsudo apt-get update\n##6. 其他\n多系统可能需要修改一下启动顺序\n\n\tsudo vim /boot/grub/grub.cfg\n\n其中有一句`default 0`，修改数字即可，如启动菜单第五项是windows，要默认启动\nwindows，改为`default 4`，保存的时候需要强制保存，输入`:wq!`\n\n有时候想设置开机自动挂载windows分区\n\n\tsudo vim /etc/fstab\n\n添加想开机挂载的分区即可\n```sh\n/dev/sda5 \t/media/data \tntfs \tdefaults \t0 \t0\n挂载分区 \t挂载位置 \t\t分区类型\n```\n---\nOK，流水账又记完了，主要是简单记录一下自己的linux环境配置，省得以后装系统再想还有哪些没装，Keep it simple and stupid.(KISS)\n",
    "date": {
      "year": "2013",
      "month": "October",
      "day": "23"
    }
  },
  {
    "id": 2,
    "title": "VIM插件配置，比肩IDE",
    "category": "磨刀利刃",
    "tags": [
      "vim",
      "linux",
      "编辑器",
      "编程工具"
    ],
    "url": "/blog/2013/10/24/vimcha-jian-pei-zhi-%2Cbi-jian-ide/",
    "content": "vim的强大是众所周知的，而且在linux里的普及也是其他编辑器无法比拟的。它默认的\n功能已经很高效方便了，但人们并不满足于此，各种各样的插件也使他的功能更加丰满\n，更加便捷，下面主要讲一下我的vim插件及配置过程。\n\n现在有很多的vim插件管理插件，如bundle、pathogen。我并没有去使用它们，而是自\n己一点一点的配置完成，然后将其上传到Github，以后需要重新配置，clone下来即可\n，分分钟搞定，很方便，可以查看[我的GitHub](https://github.com/812lcl)。\n\n<!--more-->\n\n首先，vim一般是linux自带了，在/usr/share/vim文件夹中，可以将要安装的插件及说\n明文档等放置这个目录的相应位置。其中有连接指向/etc/vim，可修改/etc/vim中的\nvimrc配置文件对vim进行设置。但不推荐这样做，这样以后想删除哪个插件比较麻烦。\n一般的做法是在$HOME文件夹下建立一个.vim文件夹，自己的插件、说明文档、语法高\n亮、配色方案等可以放在这个文件夹中的相应位置，配置文件为$HOME/.vimrc。这样\n不影响其他用户的配置，而且自己想恢复原来的vim，删除.vimrc和.vim文件夹即可。\n\n```\n|- .vim\n\t└colors \t配色方案\n\t└plugin \t插件\n\t└doc \t\t说明文档\n\t└syntax \t语法高亮\n\t└after \t修正脚本\n\t└autoload \t自动加载\n```\n下面正式开始配置了，提到的插件插件可以到[vim online](http://www.vim.org/index.php)下载，下载好放入~/.vim/plugin即可。\n\n## 1. ctags\n这是很重要的一个插件，大多数linux发行版本默认安装了ctags，如果没有可如下安装\n\n\t$ sudo apt-get install ctags\n\n或者下载源文件，编译安装\n```\n$ tar -xzvf ctags-5.6.tar.gz\n$ cd ctags-5.6\n$ make\n$ sudo make install\n```\n有了ctags，可以生成标签文件，识别出程序中的函数定义调用关系，变量，宏定义等\n，看到一个函数调用时，只需按下\"Ctrl+]\"，就可以跳转到其定义的地方，然后可以按\n\"Ctrl+T\"调回调用处。而且，有些其他插件的实现是依赖ctags实现的，所以ctags还是\n很重要的。使用方法如下\n```\ncd 程序根目录\nctags -R \t\t//生成tags文件\nvim 程序源文件\n:set tags=程序根目录/tags\n```\n## 2. taglist\ntaglist是依赖ctags发挥作用的，查看源文件时，可以打开taglist，就可以清晰的看\n到该文件中的函数名、变量名、宏定义等。可以选择相应的名字，查看定义的位置。\n安装只需下载taglis.vim，置于~/.vim/plugin中，然后在~/.vimrc中添加如下两句\n```\nlet Tlist_Show_One_File=1       \"让taglist可以同时展示一个文件的函数列表\nlet Tlist_Exit_OnlyWindow=1     \"当taglist是最后一个分割窗口时，自动退出vim\n```\n然后可以在vim中输入`:Tlist`查看效果了。\n## 3. netrw和winmanager\nnetrw是自带一个插件，不需要自己安装了，作用是显示文件夹中的子文件夹和文件情\n况。当用vim打开一个文件夹时，就是netrw的功能，可以进而删除、创建、修改文件\n文件夹。配合taglist使用，可以使vim更像一个IDE，更方便查看源程序文件。\n而winmanager就是整合taglist和netrw窗口的。同样下载winmanager.vim，放在\n~/.vim/plugin中，然后在.vimrc中填入如下\n```\nlet g:winManagerWindowLayout='FileExplorer|TagList'\nlet g:persistentBehaviour=0         \"如果所有编辑文件都关闭了，退出vim\nlet g:winManagerWidth = 30          \"窗口默认宽带        \nlet g:defaultExplorer=1\nnmap <silent> <F8> :WMToggle<cr>\n```\n最后一句为设置快捷键，按F8或者`:WMToggle`即可打开两个窗口。\n## 4. cscope\n这又是个强大的工具，是和ctags有类似功能，但比ctags更加强大的工具，具有在整个\n工程文件中更强大的查找功能。\n\n首先安装，仍可以使用apt-get\n\n\tsudo apt-get install cscope\n\n在~/.vimrc中增加一句：\n\n\t:set cscopequickfix=s-,c-,d-,i-,t-,e-        \" 使用QuickFix窗口来显示cscope查找结果\n\n使用也是如ctags类似，先在工程根目录下生成一个cscope的数据库，要查找时，需要\n把cscope.out导入到vim中，然后可以进行各种查找。\n```\ncd 工作目录\ncscope -Rbq\nvim 工程文件\n:cs add 工作目录/cscope.out 工程文件\n:cs find c|d|e|f|g|i|s|t name\n```\n其中c、d、e等代表不同的查找类型\n```\n0 或 s\t查找本 C 符号(可以跳过注释)\n1 或 g\t查找本定义\n2 或 d\t查找本函数调用的函数\n3 或 c\t查找调用本函数的函数\n4 或 t\t查找本字符串\n6 或 e\t查找本 egrep 模式\n7 或 f\t查找本文件\n8 或 i\t查找包含本文件的文件                        \n```\n查找后vim会自动跳到第一个符合的地方，如果不满意可以用`:cw`打开quickfix窗口，\n自己选择跳转位置。当然查找命令可能有些长，总去输入不太方便，可设置快捷键，在\n.vimrc中添加\n```\n\" 按下面这种组合键有技巧,按了<C-_>后要马上按下一个键,否则屏幕一闪\n\" 就回到nomal状态了\n\" <C-_>s的按法是先按\"Ctrl+Shift+-\",然后很快再按\"s\"\nnmap <C-_>s :cs find s <C-R>=expand(\"<cword>\")<cr><cr> :cw<cr>\nnmap <C-_>g :cs find g <C-R>=expand(\"<cword>\")<cr><cr> :cw<cr>\nnmap <C-_>c :cs find c <C-R>=expand(\"<cword>\")<cr><cr> :cw<cr>\nnmap <C-_>t :cs find t <C-R>=expand(\"<cword>\")<cr><cr> :cw<cr>\nnmap <C-_>e :cs find e <C-R>=expand(\"<cword>\")<cr><cr> :cw<cr>\nnmap <C-_>f :cs find f <C-R>=expand(\"<cfile>\")<cr><cr>\nnmap <C-_>i :cs find i <C-R>=expand(\"<cfile>\")<cr><cr> :cw<cr>\nnmap <C-_>d :cs find d <C-R>=expand(\"<cword>\")<cr><cr> :cw<cr>\n```\n好了，暂时就这些，cscope在大型工程中查找非常方便，但也需要慢慢学习适应使用。\n## 5. quickfix\n刚刚提到过quickfix窗口，可以显示查询结果，他也可以显示make的时候出现的错误\n列表，可以选择错误，找到出错位置，进而调试，这在IDE中是很常用的，vim也实现了\n。而且quickfix并不需要安装，是vim的标准插件，可以使用时，输入`:cw`即可。\n`:cn`和`:cp`是切换结果的命令，可以定义快捷键，在.vimrc中添加几句话。\n```\nnmap <F6> :cp<cr>\nnmap <F7> :cn<cr>\n```\n可以试验一下功能，写一个简单的c程序，将其中几句话写成有错误的，写一个\nmakefile文件，打开源文件，用`:make`进行编译，编译会报错。编译结束回到代码界\n面时输入`:cw`打开quickfix窗口，可以看到刚刚编译的几条错误，按F6或F7切换错误\n，回车可以到达错误所在的行，进行修改。\n## 6. minibufexplorer\n仍然是将下载的minibufexplorer.vim放入plugin中即可。\n\n在编程的时候不可能永远只编辑一个文件, 肯定会打开很多源文件进行编辑, 如果每个\n文件都打开一个vim进行编辑的话那操作起来将很多麻烦, 所以vim有buffer(缓冲区)的\n概念,当你只编辑一个buffer的时候MiniBufExplorer派不上用场, 当你打开第二个\nbuffer的时候, MiniBufExplorer窗口就自动弹出来了。列出了当前所有已经打开的\nbuffer, 当你把光标置于这个窗口时, 有下面几个快捷键可以用:\n```\n<Tab>\t向前循环切换到每个buffer名上\n<S-Tab>\t向后循环切换到每个buffer名上\n<Enter>\t在打开光标所在的buffer\nd \t\t删除光标所在的buffer\n```\n在.vimrc中添加如下语句，进行一定的设置\n```\nlet g:miniBufExplMapCTabSwitchBufs = 1      \"启用以下两个功能：Ctrl+tab移到下一个buffer并在当前窗口打开；\n                                            \"Ctrl+Shift+tab移到上一个buffer并在当前窗口打开；ubuntu好像不支持\nlet g:miniBufExplMapWindowNavVim = 1        \"可以用<C-h,j,k,l>切换到上下左右的窗口中\nlet g:miniBufExplMapWindowNavArrows = 1     \"可用<C-箭头键>切换到上下左右窗口中\nlet g:miniBufExplModSelTarget = 1           \"不在不可编辑内容的窗口（如TagList窗口）中打开选中的buffer\n```\n这样就很清晰的看到，当前打开了多少个文件，切换也很方便。\n## 7. a.vim\n这是一个很方便在源文件和头文件间进行切换的插件，下载好放入plugin中即可，命令如下：\n```\n:A\t在新Buffer中切换到c/h文件\n:AS\t横向分割窗口并打开c/h文件\n:AV\t纵向分割窗口并打开c/h文件\n:AT\t新建一个标签页并打开c/h文件\n```\n还可以在.vimrc中添加快捷键设置\n\n\tnnoremap <silent> <F12> :A<CR>\n\n之后按F12即可打开同名的头文件，再配合minibufexplorer，可以很好的进行切换。\n## 8. Grep\ncscope可以在工程中找到函数、变量等的调用、定义的地方，Grep则可以在全工程\n范围内，查找你想查找的任何东西。\n```\n:Grep\t\t按照指定的规则在指定的文件中查找\n:Rgrep\t\t同上, 但是是递归的grep\n:GrepBuffer\t在所有打开的缓冲区中查找\n:Bgrep\t\t同上\n:GrepArgs\t在vim的argument filenames (:args)中查找\n:Fgrep\t\t运行fgrep\n:Rfgrep\t\t运行递归的fgrep\n:Egrep\t\t运行egrep\n:Regrep\t\t运行递归的egrep\n:Agrep\t\t运行agrep\n:Ragrep\t\t运行递归的agrep\n```\n使用方法如下\n```\n:Grep   [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Rgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Fgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Rfgrep [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Egrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Regrep [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Agrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:Ragrep [<grep_options>] [<search_pattern> [<file_name(s)>]]\n:GrepBuffer [<grep_options>] [<search_pattern>]\n:Bgrep [<grep_options>] [<search_pattern>]\n:GrepArgs [<grep_options>] [<search_pattern>]\n```\n也可以输入:Grep之后一步一步输入要查找的内容、名字等，会有提示。\n## 9.visualmark\n这是一个书签，可以将你认为有问题的代码行标记高亮，多个书签键很方便的切换。\n但退出文件后，标签消失，调试程序时，标注关键代码很有帮助。\n```\nmm \t\t设定标签\nF2 \t\t正向切换\nshift+F2 \t反向切换\n```\n## 10. 补全功能\n使用vs等IDE时，补全功能是很方便的，能使编写更加的高效。vim中也有补全功能，\nctrl+p就可以补全，但不足以满足我们的要求，要像visual stdio那样补全，需要\nomnicppcoplete插件，如果你使用java编程，则需要javacomplete插件。\n\n安装方法与之前稍有不同，需要下载omnicppcoplete和javacomplete的zip压缩包，\n解压到~/.vim文件夹下，然后javacomplete还需要执行如下命令\n```\ncd ~/.vim/autoload\njavac Reflection.java\nmv ~/.vim/autoload/Reflection.class ~\n```\n一切准备就绪，最后就是在.vimrc中添加相应的设置，开启补全功能\n```\n\"-----------------------------------------------------------\n\"AutoComple\n\"-----------------------------------------------------------\nfiletype plugin on                  \"开启文件类型识别功能\nfiletype plugin indent on           \"打开文件类型检测, 加了这句才可以用智能补全\nset completeopt=longest,menu        \"关掉智能补全时的预览窗口\nsetlocal completefunc=javacomplete#CompleteParamsInfo\nautocmd FileType c set omnifunc=ccomplete#Complete\nautocmd FileType java set omnifunc=javacomplete#Complete\nautocmd FileType python set omnifunc=pythoncomplete#Complete\nautocmd FileType php set omnifunc=phpcomplete#CompletePHP\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\n\"-----------------------------------------------------------\n\"OmniCppComplete\n\"-----------------------------------------------------------\n\" 按下F4自动补全代码\nimap <F4> <C-X><C-O>\n\" 按下F5根据头文件内关键字补全\nimap <F5> <C-X><C-I>\nlet OmniCpp_MayCompleteDot = 1           \" autocomplete with .\nlet OmniCpp_MayCompleteArrow = 1         \" autocomplete with ->\nlet OmniCpp_MayCompleteScope = 1         \" autocomplete with ::\nlet OmniCpp_SelectFirstItem = 2          \" select first item (but don't insert)\nlet OmniCpp_NamespaceSearch = 2         \" search namespaces in this and included file\nlet OmniCpp_ShowPrototypeInAbbr = 1     \" show function prototype in popup window\nlet OmniCpp_GlobalScopeSearch=1         \" enable the global scope search\nlet OmniCpp_DisplayMode=1               \" Class scope completion mode: always show all members\nlet OmniCpp_ShowScopeInAbbr=1           \" show scope in abbreviation and remove the last column\n```\n现在一切都设置好了，比如编写个a.java，输入Math.然后按`ctrl+x ctrl+o`就可以出\n现可以补全的选项了，我设置了F4和F5两个快捷键，不同的补全方式和操作如下：\n```\nCtrl+P\t向前切换成员\nCtrl+N\t向后切换成员\nCtrl+E\t表示退出下拉窗口, 并退回到原来录入的文字\nCtrl+Y\t表示退出下拉窗口, 并接受当前选项\n\nCtrl+X Ctrl+L \t整行补全\nCtrl+X Ctrl+N\t根据当前文件里关键字补全\nCtrl+X Ctrl+K\t根据字典补全\nCtrl+X Ctrl+T\t根据同义词字典补全\nCtrl+X Ctrl+I\t根据头文件内关键字补全\nCtrl+X Ctrl+]\t根据标签补全\nCtrl+X Ctrl+F\t补全文件名\nCtrl+X Ctrl+D\t补全宏定义\nCtrl+X Ctrl+V\t补全vim命令\nCtrl+X Ctrl+U\t用户自定义补全方式\nCtrl+X Ctrl+S\t拼写建议\n```\n## 11. supertab\nTab键默认是根据之前输入补全，可以通过supertab插件，重定义Tab补全方式\n.vimrc中添加\n```\nlet g:SuperTabRetainCompletionType=2                                \n\" 0 - 不记录上次的补全方式\n\" 1 - 记住上次的补全方式,直到用其他的补全命令改变它\n\" 2 - 记住上次的补全方式,直到按ESC退出插入模式为止\nlet g:SuperTabDefaultCompletionType=\"<C-X><C-O>\"       \n\" 设置按下<Tab>后默认的补全方式, 默认是<C-P>\n```\n---\n这些就是我使用的vim插件的配置过程，有个简单粗暴的方法即可完成上述配置\n```\ncd ~\ngit clone https://github.com/812lcl/vim.git\nmv vim .vim\nmv .vim/vimrc-lcl .vimrc\njavac ~/.vim/autoload/Reflection.java\nmv ~/.vim/autoload/Reflection.class ~\n```\n\nvim本身已经足够强大，这些插件是锦上添花。vim是需要不断的练习的，可以参考\n[简明Vim练级攻略](http://coolshell.cn/articles/5426.html)。\n\n这里是我自己整理的一个vim、bash、git的命令操作的查询表格[点击查看](http://pan.baidu.com/s/1rFcMP)\n\n参考文章：\n> [手把手教你把Vim改装成一个IDE编程环境](http://blog.csdn.net/wooin/article/details/1858917)\n\n> [经典vim插件功能说明、安装方法和使用方法](http://blog.csdn.net/tge7618291/article/details/4216977)\n",
    "date": {
      "year": "2013",
      "month": "October",
      "day": "24"
    }
  },
  {
    "id": 3,
    "title": "Octopress博客搭建及目录结构",
    "category": "Octopress",
    "tags": [
      "octopress",
      "博客"
    ],
    "url": "/blog/2013/10/25/octopressbo-ke-da-jian-ji-mu-lu-jie-gou/",
    "content": "搭建个人博客的想法有一段时间了，不是认为自己有多牛，而是想通过写博客记录并反\n思自己的学习历程，能使学过的东西更具条理，慢慢形成自己的知识体系。但自己租个\n服务器，买个域名，一点一点搭建一个网站成本又太大，我对HTML、javascript、css\n等前端技术了解有限，网站搭建很多技术也知之甚少。但后来Jekyll、Octopress、\nGitHub pages让我搭建个人博客成为了可能。\n\n最终选择了octopress，也是因为他的简单，他基于Jekyll，处理了Jekyll的很多麻烦\n设置，也不需要对前端技术有很深的了解，从一开始什么也没有，到搭建起一个可用的\n博客只需花费十几分钟，十分方便，虽然想要配置齐自己想要的东西还是需要一番折腾\n的，但那是后话了。\n\n我的搭建环境是ubuntu 13.04，不同的系统需要作出相应的修改，但变化不大。我的\n博客中添加了3D标签、微博秀、豆瓣读书、相关文章推荐、访客地图、评论分享、\n文章热度排名等等很多东西，本文主要介绍简单博客的搭建和目录结构，之后会写篇\n文章介绍各个模块的搭建。\n<!--more-->\n## 开始搭建\nOctopress博客是搭建在github上的静态网页，octopress相当于一个自动化生成静态网\n页的工具，网页并没有使用数据库等，使用的是github提供的服务器和域名。github \npages为每个用户提供一个名为`http://username.github.com`的域名。你首先需要\n在github上建立一个名为`username.github.com`的仓库，之后的博客将会部署到这个\n仓库中，部署成后你就可以从`http://username.github.com`访问你的博客了，不过\n可能需要等待十分钟。\n\n利用到了github，所以首先应该配置好你的git环境，包括安装git，创建ssh公私钥与\ngithub建立信任连接，设置github用户名和邮箱，如果你不熟悉可以参考[GotGitHub](http://www.worldhello.net/gotgithub/index.html)。当然你还有熟悉git的基本操作了，[这里](http://rogerdudler.github.io/git-guide/index.zh.html)是一个简易教程。\n\noctopress和jekyll都是依赖于Ruby的，所以如果你没装，先要装一下它咯。octopress\n 2.0是依赖于Ruby 1.9.3版本的，所以我们指明版本安装：\n\n\tsudo apt-get install ruby1.9.3\n\n接下来就可以安装Octopress了，首先将octopress库clone到本地，在想要放置本地仓\n库的位置，建一个文件夹，文件夹名随你，比如我在$HOME/处建立了blog：\n```\n$ cd ~\n$ mkdir blog\n$ git clone git://github.com/imathis/octopress.git blog\n```\n然后进入仓库，安装其他的依赖环境：\n```\n$ cd blog\n$ sudo gem install bundler\n$ rbenv rehash\n$ bundle install \t\t#根据Gemfile安装依赖的工具，需要耐心等待\n```\n安装默认主题\n\n\trake install\n\n现在octopress安装完成，但还没有生成静态网页，还没有将其部署到网上，要设置博客使用的REPOSITORY了：\n```\n$ rake setup_github_pages\nEnter the read/write url for your repository\n(For example, 'git@github.com:your_username/your_username.github.com')\nRepository url:\n```\n请输入：git@github.com:yourname/yourname.github.com.git (将yourname替换成你的github登录名)\n\n这个步骤rake会做很多事情：\n\n1. 在.git/config中替换origin为你输入的repository，并把原来的origin写到octopress中。\n2. 创建新的branch source并切换到这个branch。\n3. 在生成的_deploy目录下，初始化git repository为你的repository。\n\n接下来就可以生成静态网页，并将其部署到github上了，只需如下两句：\n```\nrake generate \t#生成静态网页\nrake deploy \t#发布网页\n```\n等待几分钟后，网页就已经部署好了，你可以访问你的域名查看自己的博客了。然后可\n以将源码添加到github中进行管理，你仓库中有两个分支，master分支是静态网页，\nsource分支则是你的生成网页的源码，这样在另一台电脑上你可以clone你的仓库，很\n容易的进行你的博客编写。\n```\ngit add .\ngit commit -m 'init'\ngit push origin source\n```\n现在就可以进行文章的编写了，编写文章使用markdown语法，十分便捷，语法简单，可\n参见[markdown语法说明](http://wowubuntu.com/markdown/index.html#code)。\n输入如下命令：\n\n\trake new_post['title']\n\n在~/blog/source/_posts下回生成一个名为`YYYY-MM-DD-title.markdown`的文件，在这个文件中编写你的文章即可。编写完成后依然按上边发布网页的方法发布即可：\n```\nrake generate \t#生成静态网页\nrake deploy \t#发布网页\n```\n或者也可以生成静态网页后，在本机进行预览\n\n\trake preview\n\n然后可以通过`http://localhost:4000`访问，状态满意即可发布网页，以上几步同样适用于更改网页布局、样式等，重新发布网页。\n## _config.yml\n这是你的博客根目录下下的一个文件，通过编写它，可以设置网站基本信息，设置边栏\n等：\n```\nurl: http://812lcl.github.io \t\t#网站地址\ntitle: 812lcl的博客 \t\t\t\t#网站名\nsubtitle: 不要好高骛远，却又原地踏步；只想不做，太辜负青春了 \t#网站副标题\nauthor: 812lcl \t\t\t\t\t\t#作者名\nlunr_search: false \t\t\t\t\t#lunr站内搜索，需要安装，麻烦\nsimple_search: http://google.com/search \t#默认搜索引擎\ndescription: \t\t\t\t\t\t#网站描述\n...\ndefault_asides: [custom/asides/tag_cloud.html, asides/recent_posts.html, custom/asides/popular_posts.html...]\n#边栏需要在这里添加路径\n```\n这个文件是很重要的配置文件，配置博客需要经常修改此文件。\n## 目录结构\n之所以要介绍目录结构，是为了更清晰的了解各个文件是做什么用的，修改网站样式\n添加侧栏等等需要修改那些文件。以免按着教程一个一个设置完成，在脑子中却一团糟\n不记得修改了什么，万一出现了错误就不好了。\n```\n├─ config.rb  #指定额外的compass插件\n├─ config.ru  \n├─ Rakefile   #rake的配置文件,类似于makefile\n├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件\n├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x本依赖于B的y版本\n├─ _config.yml   #站点的配置文件\n├─ public/   \t#在静态编译完成后的目录,网站只需要这个目录下的文件树\n├─ _deploy/  \t#deploy时候生成的缓存文件夹,和public目录一样\n├─ sass/  \t#css文件的源文件,过程中会compass成css\n├─ plugins/  \t#放置自带以及第三方插件的目录,ruby程序\n│  └── xxx.rb\n└─ source/ \t#站点的源文件目录,public目录就是根据这个目录下数据生成的\n   └─ _includes/\n      └─ custom/  \t#自定义的模板目录,被相应上级html include\n         └─ asides/ \t#边栏模板自定义模板目录\n      └─ asides/ \t\t#边栏模板目录\n      └─ post/  \t\t#文章页面相应模板目录\n   └─ _layouts/  \t\t#默认网站html相关文件,最底层\n   └─ _posts/  \t\t#新增以及从其它程序迁移过来的数据都存在这里\n   └─ stylesheets/ \t#css文件目录\n   └─ javascripts/  \t#js文件目录\n   └─ images/  \t\t#图片目录\n```\n\n其中需要添加第三方插件时，将插件xxx.rb放入plugins文件夹中。最主要的文件夹是\nsource文件夹，因为修改网页都是在这个文件夹中进行。自己添加的边栏的HTML文件\n都放置于`source/_includes/custom/asides`中，然后再_config.yml中的default_asides:中添加对应的路径，即可在网页上显示出边栏。\n修改`source/_includes/`中的其他HTML文件，如header.html等，则可以修改标题栏、\n导航栏、尾栏等等。\n\n`source/_layouts`中则是网站的布局的一些HTML文件，可以修改文件布局等等。三个\n文件夹目录是非常重要并且常修改的。source中images中则放置网站相关的一些图片，\njavascripts文件家中放置一些模块需要调用的javascript脚本，_post中则是你的每篇\n博客。\n\n---\n以上就是Octopress博客搭建的一个简单过程和目录结构，之后会详细介绍我的博客\n中各个模块建立的过程及出现的问题，敬请关注。\n\n参考文章：\n\n- [利用Octopress在github Pages上搭建个人博客](http://easypi.github.io/blog/2013/01/05/using-octopress-to-setup-blog-on-github/)\n\n- [迁移octpress,Rakefile修改以及豆瓣推荐,豆瓣收藏秀,新浪微博分享按钮等实现](http://www.dongwm.com/archives/qian-yi-octpressyi-ji-zi-ding-yi/)\n\n- [Octopress博客设置](http://www.csdn123.com/html/blogs/20130531/17852.htm)\n",
    "date": {
      "year": "2013",
      "month": "October",
      "day": "25"
    }
  },
  {
    "id": 9,
    "title": "404 Error",
    "url": "/404.html",
    "content": "<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children,js\" charset=\"utf-8></script>\n"
  }
]